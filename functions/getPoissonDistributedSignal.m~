function sig = getPoissonDistributedSignal(seq)
% getPoissonDistributedSignal: Reconstructs a signal (sig) of time-varying bandwidth
%
% greconv2 uses generalized sampling theory to interpolate (reconstruct)
% signal data across any point t on the real line. This is similar to sinc
% interpolation, but uses a generalized reconstruction kernel. 
%
% Inputs:
%  seq - Array
%
% Output:
%  sig - Array 
%  
    seq_without_tails = seq(1:end-500);
    min_val = min(seq_without_tails);
    max_val = max(seq_without_tails);
    
    sig_len = 0;
    seq_min = min(primes);
    seq_max = max(primes);
    poisson_seq = [];

    seq_tails = seq(end-499:end);
    sig_main = [];
end

function sig = genSignal(seq)
    sig_len = 0;
    sig = [];

    min_val = min(seq);
    max_val = max(seq);
    seq_len = length(seq)
    
    while (sig_len ~= dom_primes)
        try_new_number = seq_min + (seq_max - seq_min) * rand;
        nums_in_interval = length(primes((primes >= try_new_number - 100) & (primes <= try_new_number + 100)));
        if (rand > (nums_in_interval / 200)) 
            continue;
        end
        poisson_seq = unique([poisson_seq try_new_number]);
        sig_len = length(poisson_seq);
    end
end

